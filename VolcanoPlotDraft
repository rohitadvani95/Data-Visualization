#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Aug 19 16:08:35 2024

@author: rohitadvani
"""

import pandas as pd
import numpy as np
import scipy

import string
import plotly
import dash_bio

from scipy import stats
from sklearn.datasets import make_blobs

import seaborn as sns
from matplotlib.colors import LogNorm
from matplotlib.colors import LinearSegmentedColormap

import plotly.io as pio
import plotly.express as px 
import plotly.graph_objects as go
import plotly.figure_factory as ff
from plotly.figure_factory import create_dendrogram

pio.renderers.default= 'png'

import csv

rawdata = pd.read_csv(r'/Users/rohitadvani/Downloads/1957_P1-3_deliverables/P1/1957_P1_protein.csv', header=None, skiprows=0)

df = rawdata.iloc[0:9092, 0:41]
df2 = df.drop(df.iloc[:, 0:4],axis=1)
df2.infer_objects().dtypes

WTC = df.iloc[1:,29:35].astype(float)
WTV = df.iloc[1:,23:29].astype(float)
KC = df.iloc[1:,35:41].astype(float)

WTCsmplstd = WTC.std(axis=1, numeric_only=True)
WTVsmplstd = WTV.std(axis=1, numeric_only=True)
KCsmplstd = KC.std(axis=1, numeric_only=True)

#print(WTCsmplstd)
#print(WTVsmplstd)
#print(KCsmplstd)



WTC = WTC.assign(mean=WTC.mean(axis=1))
WTV = WTV.assign(mean=WTV.mean(axis=1))
KC = KC.assign(mean=KC.mean(axis=1))

WTC.infer_objects().dtypes
WTV.infer_objects().dtypes
KC.infer_objects().dtypes

#print(WTC)

#sample standard deviations


WTVoverWTC = (WTV['mean']/WTC['mean'])
KCoverWTC = (KC['mean']/WTC['mean'])

#print(WTVoverWTC)
#print(KCoverWTC)


WTVratiolog2 = np.log2(WTVoverWTC)
#WTCratiolog2 = np.log2(WTC['mean'])
KCratiolog2 = np.log2(KCoverWTC)



#print(WTVratiolog2)

#print(KCratiolog2)

#print(df.iloc[:,3:4])


#print(WTV['mean']).type

NOP = df.iloc[1:,3:4]
NOP.astype(float)

nobs1 = NOP
nobs2 = nobs1

print(nobs2)
print(nobs2.shape)

mean1 = WTV['mean'].astype(float)
mean2= WTC['mean'].astype(float)

mean1.info
print(mean1)
print(mean1.shape)
print(mean2)
print(mean2.shape)


std1 = WTVsmplstd.astype(float)
std2 = WTCsmplstd.astype(float)
std1.info
print(std1)
print(std1.shape)
print(std2)
print(std2.shape)


#create empty dataframe to paste output into
df_output = pd.DataFrame()

print("cat")

scipy.stats.ttest_ind_from_stats(mean1, std1, nobs1, mean2, std2, nobs2)


#df_output.apply(lambda x: stats.ttest_ind_from_stats(mean1, std1, nobs1, mean2, std2, nobs2)[1],axis=1)

#print(df_output)


#scipy.stats.ttest_ind_from_stats(WTV['mean'], WTVsmplstd, nobs1, WTC['mean'], WTCsmplstd , nobs2)


#ttest_ind_from_stats(, equal_var=True, alternative='two-sided')


#WTVPVALS = 

#KCPVALS = 


#WTVpvallog10 = np.log10(WTVPVALS) * (-1)
#KCpvallog10 = np.log10(KCPVALS) * (-1)


#fig = go.Figure()
#trace1 = go.Scatter(x=WTVratiolog2,
 #                   y=WTVPvallog10,
  #                  mode='markers',
   #                 name='WTV',
    #                hovertext=list(df.index))
#trace2 = go.Scatter(x=KCratiolog2,
     #               y=KCpvallog10,
      #              mode='markers',
       #             name='KC',
        #            hovertext=list(df.index))

#fig.add_trace(trace1)
#fig.add_trace(trace2)

#fig.update_layout(title='Volcano plot Knockout vs. WTV')
#fig.show()
